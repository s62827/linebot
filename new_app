from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageSendMessage

from supabase import create_client, Client

from datetime import datetime
import re
import matplotlib.pyplot as plt
import io
import os
from matplotlib import font_manager

# Supabase 設定
SUPABASE_URL = "https://kounvedczvpdiajozfkq.supabase.co"
SUPABASE_KEY = "你的 Supabase Key"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# LINE 設定
app = Flask(__name__)
LINE_CHANNEL_ACCESS_TOKEN = "你的 LINE TOKEN"
LINE_CHANNEL_SECRET = "你的 LINE SECRET"
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# 類別關鍵字
category_keywords = {
    "飲食": ["早餐", "午餐", "晚餐", "拉麵", "火鍋", "珍奶", "飲料", "吃飯", "餐", "麥當勞"],
    "交通": ["捷運", "公車", "火車", "高鐵", "加油", "停車費", "計程車", "uber", "騎車", "車票"],
    "娛樂": ["電影", "遊戲", "Netflix", "演唱會", "KTV", "直播", "YouTube", "漫畫", "桌遊"],
    "購物": ["蝦皮", "momo", "PChome", "淘寶", "全聯", "家樂福", "衣服", "包包", "鞋子", "電腦"],
    "其他": []
}

# 功能關鍵字偵測
def detect_function(text):
    function_keywords = {
        "查詢": ["查詢", "紀錄", "看看帳"],
        "刪除": ["刪除", "移除"],
        "設定預算": ["設定預算", "這個月預算"],
        "統計": ["統計", "總花費"],
        "查詢日期": ["查詢日期", "日期"],
        "圖表": ["圖表", "餅圖"],
        "本月剩餘": ["剩餘", "剩多少", "預算"]
    }
    for func, keywords in function_keywords.items():
        for kw in keywords:
            if kw in text:
                return func
    return None

# 分類邏輯
def classify(text):
    for cat, keywords in category_keywords.items():
        if any(k in text for k in keywords):
            return cat
    return "其他"

# 提取備註與金額
def extract_note_and_amount(text):
    match = re.search(r"([^\d\s]{1,10})?[^\d]*(\d{1,5})", text)
    if match:
        note = match.group(1) if match.group(1) else "未分類"
        amount = int(match.group(2))
        return note, amount
    return None, None

# Webhook 路由
@app.route("/webhook", methods=["POST"])
def webhook():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

# 處理來自 LINE 的訊息
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    user_id = event.source.user_id
    detected_func = detect_function(text)
    reply = ""

    # 查詢最近紀錄
    if detected_func == "查詢":
        res = supabase.table("records").select("*").eq("user_id", user_id).order("id", desc=True).limit(5).execute()
        rows = res.data
        reply = "📋 最近紀錄：\n" + "\n".join([f"ID:{r['id']}｜{r['date']}｜{r['note']}｜{r['amount']}元｜{r['category']}" for r in rows]) if rows else "📭 沒有任何記錄"

    # 刪除紀錄
    elif detected_func == "刪除" and text.startswith("刪除"):
        try:
            target_id = int(text.split()[1])
            res = supabase.table("records").select("*").eq("id", target_id).eq("user_id", user_id).execute()
            if res.data:
                supabase.table("records").delete().eq("id", target_id).execute()
                reply = f"🗑️ 已刪除：ID:{res.data[0]['id']}｜{res.data[0]['note']}｜{res.data[0]['amount']}元"
            else:
                reply = f"❌ 找不到 ID 為 {target_id} 的紀錄"
        except:
            reply = "⚠️ 請輸入：刪除 [ID]，例如：刪除 3"

    # 查詢分類
    elif text.startswith("查詢 "):
        category = text.split()[1]
        res = supabase.table("records").select("*").eq("category", category).eq("user_id", user_id).order("id", desc=True).limit(5).execute()
        rows = res.data
        reply = f"📋 最近的【{category}】紀錄：\n" + "\n".join([f"ID:{r['id']}｜{r['date']}｜{r['note']}｜{r['amount']}元" for r in rows]) if rows else f"📭 沒有分類【{category}】紀錄"

    # 統計分類總額
    elif detected_func == "統計":
        res = supabase.table("records").select("category, amount").eq("user_id", user_id).execute()
        summary = {}
        for r in res.data:
            summary[r["category"]] = summary.get(r["category"], 0) + r["amount"]
        reply = "📊 各分類總花費：\n" + "\n".join([f"{k}：{v} 元" for k, v in summary.items()]) if summary else "📭 沒有記錄可以統計"

    # 查詢日期區間
    elif detected_func == "查詢日期" and text.startswith("查詢日期"):
        try:
            _, start_date, end_date = text.split()
            res = supabase.table("records").select("*").eq("user_id", user_id).gte("date", start_date).lte("date", end_date).execute()
            rows = res.data
            reply = f"📅 {start_date}～{end_date} 紀錄：\n" + "\n".join([f"ID:{r['id']}｜{r['date']}｜{r['note']}｜{r['amount']}元" for r in rows]) if rows else "📭 此區間無記錄"
        except:
            reply = "⚠️ 格式錯誤，請輸入：查詢日期 2025-04-01 2025-04-30"

    # 畫圖表
    elif detected_func == "圖表":
        now_month = datetime.now().strftime("%Y-%m")
        res = supabase.table("records").select("category, amount").eq("user_id", user_id).like("date", f"{now_month}%").execute()
        rows = res.data
        if not rows:
            reply = "📭 本月尚無記錄"
        else:
            summary = {}
            for r in rows:
                summary[r["category"]] = summary.get(r["category"], 0) + r["amount"]
            labels = list(summary.keys())
            values = list(summary.values())

            font_path = "NotoSansTC-VariableFont_wght.ttf"
            font_prop = font_manager.FontProperties(fname=font_path)
            plt.rcParams['font.family'] = font_prop.get_name()
            plt.figure(figsize=(6, 6))
            plt.pie(values, labels=labels, autopct=lambda p: f"{p:.1f}% ({int(p*sum(values)/100)}元)")
            plt.title("本月支出比例", fontproperties=font_prop)
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)

            if not os.path.exists("static"):
                os.makedirs("static")
            with open("static/chart.png", "wb") as f:
                f.write(buf.read())
            buf.close()

            image_url = "https://你的網址/static/chart.png"  # ←請替換成你的網址
            line_bot_api.reply_message(
                event.reply_token,
                ImageSendMessage(original_content_url=image_url, preview_image_url=image_url)
            )
            return

    # 設定預算
    elif detected_func == "設定預算":
        try:
            budget = int(text.split()[1])
            supabase.table("budget").upsert({"user_id": user_id, "amount": budget}).execute()
            reply = f"✅ 已設定本月預算為 {budget} 元"
        except:
            reply = "⚠️ 格式錯誤，請輸入：設定預算 5000"

    # 查詢剩餘預算
    elif detected_func == "本月剩餘":
        budget_res = supabase.table("budget").select("amount").eq("user_id", user_id).execute()
        if not budget_res.data:
            reply = "⚠️ 尚未設定預算，請輸入：設定預算 [金額]"
        else:
            budget = budget_res.data[0]['amount']
            this_month = datetime.now().strftime("%Y-%m")
            spent = sum(r['amount'] for r in supabase.table("records").select("amount").eq("user_id", user_id).like("date", f"{this_month}%").execute().data)
            reply = f"💰 本月預算：{budget} 元\n💸 已花費：{spent} 元\n🟢 剩餘：{budget - spent} 元"

    # 預設為記帳
    else:
        note, amount = extract_note_and_amount(text)
        if note and amount:
            category = classify(text)
            now = datetime.now().strftime("%Y-%m-%d")
            supabase.table("records").insert({
                "user_id": user_id,
                "date": now,
                "note": note,
                "amount": amount,
                "category": category
            }).execute()
            reply = f"✅ 已記帳：{note}｜{amount} 元｜分類：{category}"
        else:
            reply = "⚠️ 請輸入金額或有效指令"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
