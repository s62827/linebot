from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from flask_apscheduler import APScheduler
from datetime import datetime, timedelta
from collections import Counter
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import re
import os
import requests

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///expenses.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SCHEDULER_API_ENABLED'] = True

db = SQLAlchemy(app)
scheduler = APScheduler()
scheduler.init_app(app)
scheduler.start()

# 讀取環境變數
RENDER_APP_URL = os.getenv('RENDER_APP_URL', 'http://localhost:5000')
LINE_CHANNEL_ACCESS_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
LINE_CHANNEL_SECRET = os.getenv('LINE_CHANNEL_SECRET')

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

### 資料庫模型 ###
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)

class Expense(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    description = db.Column(db.String(200), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

### 使用者功能 ###
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    if User.query.filter_by(username=data['username']).first():
        return jsonify({'message': '使用者已存在'}), 400
    user = User(username=data['username'],
                password_hash=generate_password_hash(data['password']))
    db.session.add(user)
    db.session.commit()
    return jsonify({'message': '註冊成功'})

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(username=data['username']).first()
    if user and check_password_hash(user.password_hash, data['password']):
        return jsonify({'message': '登入成功'})
    return jsonify({'message': '帳號或密碼錯誤'}), 401

### 自動分類 ###
def classify_expense(description):
    if '餐' in description or '吃' in description:
        return '餐飲'
    elif '車' in description or '捷運' in description:
        return '交通'
    elif '衣' in description:
        return '服飾'
    elif '書' in description or '課' in description:
        return '教育'
    else:
        return '其他'

### 記帳 ###
@app.route('/add_expense', methods=['POST'])
def add_expense():
    data = request.json
    user = User.query.filter_by(username=data['username']).first()
    if not user:
        return jsonify({'message': '使用者不存在'}), 404
    expense = Expense(user_id=user.id,
                      description=data['description'],
                      amount=float(data['amount']))
    db.session.add(expense)
    db.session.commit()
    return jsonify({'message': '支出已紀錄'})

### 查詢 ###
@app.route('/expenses/<username>', methods=['GET'])
def get_expenses(username):
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({'message': '使用者不存在'}), 404
    expenses = Expense.query.filter_by(user_id=user.id).all()
    result = [{'description': e.description, 'amount': e.amount,
               'timestamp': e.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
              for e in expenses]
    return jsonify(result)

### 統計 ###
@app.route('/summary/<username>', methods=['GET'])
def get_summary(username):
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({'message': '使用者不存在'}), 404
    expenses = Expense.query.filter_by(user_id=user.id).all()
    category_totals = {}
    for e in expenses:
        category = classify_expense(e.description)
        category_totals[category] = category_totals.get(category, 0) + e.amount
    all_text = ' '.join([e.description for e in expenses])
    words = re.findall(r'\w+', all_text)
    word_count = Counter(words).most_common(10)
    return jsonify({'category_totals': category_totals, 'word_frequency': word_count})

### 每週自動通知 ###
@scheduler.task('cron', id='weekly_summary', day_of_week='sun', hour=20)
def weekly_summary():
    users = User.query.all()
    for user in users:
        expenses = Expense.query.filter_by(user_id=user.id)\
            .filter(Expense.timestamp >= datetime.utcnow() - timedelta(days=7)).all()
        total = sum(e.amount for e in expenses)
        print(f"[通知] 使用者 {user.username} 本週總支出：{total:.2f} 元")

### LINE Webhook 入口 ###
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return 'Invalid signature', 400
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    match = re.match(r"^(.+)\s+(\d+(\.\d{1,2})?)$", text)
    if match:
        description, amount = match.group(1), float(match.group(2))
        user = User.query.filter_by(username=event.source.user_id).first()
        if not user:
            user = User(username=event.source.user_id,
                        password_hash=generate_password_hash('default'))
            db.session.add(user)
            db.session.commit()
        expense = Expense(user_id=user.id, description=description, amount=amount)
        db.session.add(expense)
        db.session.commit()
        reply = f"已記帳：{description} - {amount} 元"
    else:
        reply = "請用格式：項目 金額，例如：午餐 120"
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

### 根目錄 ###
@app.route('/')
def home():
    return 'LINE 記帳機器人運行中！'

### 初始化 ###
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
